name: Rotate Passwords

on:
  workflow_dispatch:
  schedule:
    # Run monthly on the 1st at 2 AM UTC
    - cron: '0 2 1 * *'

env:
  KEY_VAULT_NAME: kv-rbc-dev
  RESOURCE_GROUP: RBCLeasingApp-Dev

jobs:
  rotate-passwords:
    name: Rotate PostgreSQL Password
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
      
      - name: Generate New Password
        id: generate
        run: |
          # Generate a strong random password
          NEW_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
          echo "::add-mask::$NEW_PASSWORD"
          echo "NEW_PASSWORD=$NEW_PASSWORD" >> $GITHUB_ENV
          echo "Password generated successfully"
      
      - name: Update Key Vault Secret
        run: |
          # Store new password in Key Vault
          az keyvault secret set \
            --vault-name ${{ env.KEY_VAULT_NAME }} \
            --name "postgresql-admin-password-dev" \
            --value "${{ env.NEW_PASSWORD }}" \
            --tags Purpose=postgresql-admin Environment=dev LastRotated=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "‚úÖ Password stored in Key Vault"
      
      - name: Update PostgreSQL Password
        run: |
          # Update PostgreSQL server password
          az postgres flexible-server update \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name "psql-rbcleasing-dev" \
            --admin-password "${{ env.NEW_PASSWORD }}"
          
          echo "‚úÖ PostgreSQL password updated"
      
      - name: Verify Connection
        run: |
          # Test connection with new password
          SERVER_NAME="psql-rbcleasing-dev"
          ADMIN_USER="rbcadmin"
          
          # Get server FQDN
          FQDN=$(az postgres flexible-server show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name $SERVER_NAME \
            --query "fullyQualifiedDomainName" \
            --output tsv)
          
          echo "‚úÖ Password rotation completed successfully"
          echo "Server: $FQDN"
      
      - name: Create Issue for Manual Updates
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîê Password Rotation Completed - ${date}`,
              body: `## PostgreSQL Password Rotated Successfully
              
              The PostgreSQL admin password has been automatically rotated and stored in Azure Key Vault.
              
              ### Details
              - **Key Vault**: ${{ env.KEY_VAULT_NAME }}
              - **Secret Name**: postgresql-admin-password-dev
              - **Rotation Date**: ${date}
              
              ### Action Required
              If any applications are using hardcoded passwords, they need to be updated to use Key Vault references.
              
              ### How to Retrieve
              \`\`\`bash
              az keyvault secret show \\
                --vault-name ${{ env.KEY_VAULT_NAME }} \\
                --name postgresql-admin-password-dev \\
                --query value -o tsv
              \`\`\`
              
              This issue can be closed once verified.`,
              labels: ['security', 'automated']
            });