{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "6268847261924519967"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "allowedValues": [
        "dev",
        "qa",
        "prod"
      ],
      "metadata": {
        "description": "Environment name"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for resources"
      }
    },
    "secondaryLocation": {
      "type": "string",
      "defaultValue": "westus2",
      "metadata": {
        "description": "Secondary location for geo-replication"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags for resources"
      }
    },
    "enableGeoReplication": {
      "type": "bool",
      "defaultValue": "[equals(parameters('environmentName'), 'prod')]",
      "metadata": {
        "description": "Enable geo-replication (Premium SKU required)"
      }
    },
    "enableVulnerabilityScanning": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable vulnerability scanning"
      }
    },
    "enableContentTrust": {
      "type": "bool",
      "defaultValue": "[equals(parameters('environmentName'), 'prod')]",
      "metadata": {
        "description": "Enable content trust"
      }
    },
    "retentionDays": {
      "type": "int",
      "defaultValue": "[if(equals(parameters('environmentName'), 'prod'), 90, 30)]",
      "metadata": {
        "description": "Days to retain untagged manifests"
      }
    },
    "pullPrincipalIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Principal IDs that need pull access"
      }
    },
    "pushPrincipalIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Principal IDs that need push access"
      }
    }
  },
  "variables": {
    "acrName": "acrtourbus",
    "skuName": "[if(equals(parameters('environmentName'), 'prod'), 'Premium', 'Standard')]"
  },
  "resources": [
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-07-01",
      "name": "[variables('acrName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[variables('skuName')]"
      },
      "properties": {
        "adminUserEnabled": false,
        "publicNetworkAccess": "[if(equals(parameters('environmentName'), 'prod'), 'Disabled', 'Enabled')]",
        "networkRuleBypassOptions": "AzureServices",
        "policies": {
          "quarantinePolicy": {
            "status": "[if(parameters('enableVulnerabilityScanning'), 'enabled', 'disabled')]"
          },
          "trustPolicy": {
            "type": "Notary",
            "status": "[if(parameters('enableContentTrust'), 'enabled', 'disabled')]"
          },
          "retentionPolicy": {
            "days": "[parameters('retentionDays')]",
            "status": "enabled"
          },
          "exportPolicy": {
            "status": "[if(equals(parameters('environmentName'), 'prod'), 'disabled', 'enabled')]"
          }
        },
        "encryption": "[if(equals(parameters('environmentName'), 'prod'), createObject('status', 'enabled'), createObject('status', 'disabled'))]",
        "dataEndpointEnabled": false,
        "anonymousPullEnabled": false
      }
    },
    {
      "condition": "[and(parameters('enableGeoReplication'), equals(variables('skuName'), 'Premium'))]",
      "type": "Microsoft.ContainerRegistry/registries/replications",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('acrName'), format('{0}replica', parameters('secondaryLocation')))]",
      "location": "[parameters('secondaryLocation')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "regionEndpointEnabled": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]"
      ]
    },
    {
      "type": "Microsoft.ContainerRegistry/registries/tasks",
      "apiVersion": "2019-04-01",
      "name": "[format('{0}/{1}', variables('acrName'), 'purgeUntaggedManifests')]",
      "location": "[parameters('location')]",
      "properties": {
        "platform": {
          "os": "Linux",
          "architecture": "amd64"
        },
        "agentConfiguration": {
          "cpu": 2
        },
        "step": {
          "type": "EncodedTask",
          "encodedTaskContent": "[base64('        version: v1.1.0\r\n        steps:\r\n          - cmd: acr purge --filter \"tourbus-frontend:.*\" --filter \"tourbus-backend:.*\" --untagged --ago ${retentionDays}d\r\n            disableWorkingDirectoryOverride: true\r\n            timeout: 3600\r\n      ')]"
        },
        "trigger": {
          "timerTriggers": [
            {
              "schedule": "0 2 * * *",
              "name": "dailyPurge"
            }
          ]
        },
        "timeout": 3600
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]"
      ]
    },
    {
      "condition": "[parameters('enableVulnerabilityScanning')]",
      "type": "Microsoft.ContainerRegistry/registries/webhooks",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('acrName'), 'vulnerabilityscan')]",
      "location": "[parameters('location')]",
      "properties": {
        "status": "enabled",
        "scope": "*",
        "actions": [
          "push",
          "quarantine"
        ],
        "serviceUri": "https://tourbus-security.azurewebsites.net/api/scan"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]"
      ]
    },
    {
      "type": "Microsoft.ContainerRegistry/registries/webhooks",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('acrName'), 'cicdwebhook')]",
      "location": "[parameters('location')]",
      "properties": {
        "status": "enabled",
        "scope": "*",
        "actions": [
          "push"
        ],
        "serviceUri": "https://tourbus-deploy.azurewebsites.net/api/deploy"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]"
      ]
    },
    {
      "copy": {
        "name": "acrPullRole",
        "count": "[length(parameters('pullPrincipalIds'))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', variables('acrName'))]",
      "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), parameters('pullPrincipalIds')[copyIndex()], '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
      "properties": {
        "principalId": "[parameters('pullPrincipalIds')[copyIndex()]]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]"
      ]
    },
    {
      "copy": {
        "name": "acrPushRole",
        "count": "[length(parameters('pushPrincipalIds'))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', variables('acrName'))]",
      "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), parameters('pushPrincipalIds')[copyIndex()], '8311e382-0749-4cb8-b61a-304f252e45ec')]",
      "properties": {
        "principalId": "[parameters('pushPrincipalIds')[copyIndex()]]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', variables('acrName'))]",
      "name": "acr-diagnostics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-tourbus-{0}', parameters('environmentName')))]",
        "logs": [
          {
            "category": "ContainerRegistryRepositoryEvents",
            "enabled": true
          },
          {
            "category": "ContainerRegistryLoginEvents",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]"
      ]
    }
  ],
  "outputs": {
    "registryName": {
      "type": "string",
      "value": "[variables('acrName')]"
    },
    "registryLoginServer": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), '2023-07-01').loginServer]"
    },
    "registryId": {
      "type": "string",
      "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]"
    }
  }
}