@description('Key Vault name')
param keyVaultName string

@description('Environment name')
param environmentName string

@description('Password purpose')
param passwordPurpose string = 'postgresql-admin'

@description('Password to use (if empty, generates random)')
@secure()
param existingPassword string = ''

// Reference existing Key Vault
resource keyVault 'Microsoft.KeyVault/vaults@2023-07-01' existing = {
  name: keyVaultName
}

// Generate a complex password using Bicep functions
var timestamp = utcNow()
var baseString = uniqueString(resourceGroup().id, passwordPurpose, environmentName, timestamp)
var complexPassword = '${toUpper(take(baseString, 2))}${baseString}${take(uniqueString(timestamp), 4)}!@#'

// Store password in Key Vault
resource passwordSecret 'Microsoft.KeyVault/vaults/secrets@2023-07-01' = {
  parent: keyVault
  name: '${passwordPurpose}-password-${environmentName}'
  properties: {
    value: !empty(existingPassword) ? existingPassword : complexPassword
    attributes: {
      enabled: true
      exp: dateTimeToEpoch(dateTimeAdd(timestamp, 'P90D')) // Expires in 90 days
    }
    contentType: 'password'
    tags: {
      Purpose: passwordPurpose
      Environment: environmentName
      AutoGenerated: empty(existingPassword) ? 'true' : 'false'
      CreatedAt: timestamp
      ExpiresAt: dateTimeAdd(timestamp, 'P90D')
    }
  }
}

// Output the secret reference (not the value)
output secretName string = passwordSecret.name
output secretUri string = passwordSecret.properties.secretUri
output keyVaultName string = keyVault.name
output expirationDate string = dateTimeAdd(timestamp, 'P90D')