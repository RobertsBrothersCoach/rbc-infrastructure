{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "8695196892604806184"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "metadata": {
        "description": "Environment name"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for resources"
      }
    },
    "allowedManagementIPs": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Allow list of IP addresses for management access"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-09-01",
      "name": "[format('vnet-rbc-{0}', parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "enableDdosProtection": "[if(equals(parameters('environmentName'), 'prod'), true(), false())]",
        "ddosProtectionPlan": "[if(equals(parameters('environmentName'), 'prod'), createObject('id', resourceId('Microsoft.Network/ddosProtectionPlans', format('ddos-rbc-{0}', parameters('environmentName')))), null())]",
        "subnets": [
          {
            "name": "snet-app-services",
            "properties": {
              "addressPrefix": "10.0.1.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-app-services-{0}', parameters('environmentName')))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.KeyVault",
                  "locations": [
                    "[parameters('location')]"
                  ]
                },
                {
                  "service": "Microsoft.Storage",
                  "locations": [
                    "[parameters('location')]"
                  ]
                },
                {
                  "service": "Microsoft.Sql",
                  "locations": [
                    "[parameters('location')]"
                  ]
                }
              ],
              "delegations": [
                {
                  "name": "delegation-app-services",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms"
                  }
                }
              ]
            }
          },
          {
            "name": "snet-database",
            "properties": {
              "addressPrefix": "10.0.2.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-database-{0}', parameters('environmentName')))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage",
                  "locations": [
                    "[parameters('location')]"
                  ]
                }
              ],
              "delegations": [
                {
                  "name": "delegation-postgresql",
                  "properties": {
                    "serviceName": "Microsoft.DBforPostgreSQL/flexibleServers"
                  }
                }
              ]
            }
          },
          {
            "name": "snet-redis",
            "properties": {
              "addressPrefix": "10.0.3.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-redis-{0}', parameters('environmentName')))]"
              },
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Disabled"
            }
          },
          {
            "name": "snet-private-endpoints",
            "properties": {
              "addressPrefix": "10.0.4.0/24",
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Disabled"
            }
          },
          {
            "name": "snet-container-apps",
            "properties": {
              "addressPrefix": "10.0.5.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-container-apps-{0}', parameters('environmentName')))]"
              },
              "delegations": [
                {
                  "name": "delegation-container-apps",
                  "properties": {
                    "serviceName": "Microsoft.App/environments"
                  }
                }
              ]
            }
          },
          {
            "name": "snet-management",
            "properties": {
              "addressPrefix": "10.0.6.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-management-{0}', parameters('environmentName')))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/ddosProtectionPlans', format('ddos-rbc-{0}', parameters('environmentName')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-app-services-{0}', parameters('environmentName')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-container-apps-{0}', parameters('environmentName')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-database-{0}', parameters('environmentName')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-management-{0}', parameters('environmentName')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-redis-{0}', parameters('environmentName')))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-09-01",
      "name": "[format('nsg-app-services-{0}', parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHTTPSFromInternet",
            "properties": {
              "priority": 100,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "description": "Allow HTTPS traffic from Internet"
            }
          },
          {
            "name": "AllowHTTPFromInternet",
            "properties": {
              "priority": 110,
              "direction": "Inbound",
              "access": "[if(equals(parameters('environmentName'), 'prod'), 'Deny', 'Allow')]",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "description": "Allow HTTP in non-prod, deny in prod"
            }
          },
          {
            "name": "AllowAzureLoadBalancer",
            "properties": {
              "priority": 120,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "*",
              "description": "Allow Azure Load Balancer health probes"
            }
          },
          {
            "name": "AllowVnetCommunication",
            "properties": {
              "priority": 130,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "description": "Allow VNet internal communication"
            }
          },
          {
            "name": "DenyAllInbound",
            "properties": {
              "priority": 4096,
              "direction": "Inbound",
              "access": "Deny",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "description": "Deny all other inbound traffic"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-09-01",
      "name": "[format('nsg-database-{0}', parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowPostgreSQLFromAppServices",
            "properties": {
              "priority": 100,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "5432",
              "sourceAddressPrefix": "10.0.1.0/24",
              "destinationAddressPrefix": "*",
              "description": "Allow PostgreSQL from App Services subnet"
            }
          },
          {
            "name": "AllowPostgreSQLFromContainerApps",
            "properties": {
              "priority": 110,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "5432",
              "sourceAddressPrefix": "10.0.5.0/24",
              "destinationAddressPrefix": "*",
              "description": "Allow PostgreSQL from Container Apps subnet"
            }
          },
          {
            "name": "AllowPostgreSQLFromManagement",
            "properties": {
              "priority": 120,
              "direction": "Inbound",
              "access": "[if(not(equals(parameters('environmentName'), 'prod')), 'Allow', 'Deny')]",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "5432",
              "sourceAddressPrefix": "10.0.6.0/24",
              "destinationAddressPrefix": "*",
              "description": "Allow PostgreSQL from Management subnet (non-prod only)"
            }
          },
          {
            "name": "AllowAzureServices",
            "properties": {
              "priority": 130,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureCloud",
              "destinationAddressPrefix": "*",
              "description": "Allow Azure services"
            }
          },
          {
            "name": "DenyAllInbound",
            "properties": {
              "priority": 4096,
              "direction": "Inbound",
              "access": "Deny",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "description": "Deny all other inbound traffic"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-09-01",
      "name": "[format('nsg-redis-{0}', parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowRedisFromAppServices",
            "properties": {
              "priority": 100,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRanges": [
                "6379",
                "6380"
              ],
              "sourceAddressPrefix": "10.0.1.0/24",
              "destinationAddressPrefix": "*",
              "description": "Allow Redis from App Services subnet"
            }
          },
          {
            "name": "AllowRedisFromContainerApps",
            "properties": {
              "priority": 110,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRanges": [
                "6379",
                "6380"
              ],
              "sourceAddressPrefix": "10.0.5.0/24",
              "destinationAddressPrefix": "*",
              "description": "Allow Redis from Container Apps subnet"
            }
          },
          {
            "name": "DenyAllInbound",
            "properties": {
              "priority": 4096,
              "direction": "Inbound",
              "access": "Deny",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "description": "Deny all other inbound traffic"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-09-01",
      "name": "[format('nsg-container-apps-{0}', parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHTTPSFromInternet",
            "properties": {
              "priority": 100,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "description": "Allow HTTPS traffic from Internet"
            }
          },
          {
            "name": "AllowHTTPFromInternet",
            "properties": {
              "priority": 110,
              "direction": "Inbound",
              "access": "[if(equals(parameters('environmentName'), 'prod'), 'Deny', 'Allow')]",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "description": "Allow HTTP in non-prod only"
            }
          },
          {
            "name": "AllowVnetCommunication",
            "properties": {
              "priority": 120,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "description": "Allow VNet internal communication"
            }
          },
          {
            "name": "DenyAllInbound",
            "properties": {
              "priority": 4096,
              "direction": "Inbound",
              "access": "Deny",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "description": "Deny all other inbound traffic"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-09-01",
      "name": "[format('nsg-management-{0}', parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": "[concat(createArray(createObject('name', 'AllowSSHFromAllowedIPs', 'properties', createObject('priority', 100, 'direction', 'Inbound', 'access', if(greater(length(parameters('allowedManagementIPs')), 0), 'Allow', 'Deny'), 'protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRange', '22', 'sourceAddressPrefixes', if(greater(length(parameters('allowedManagementIPs')), 0), parameters('allowedManagementIPs'), createArray('0.0.0.0/32')), 'destinationAddressPrefix', '*', 'description', 'Allow SSH from specified IPs only')), createObject('name', 'AllowRDPFromAllowedIPs', 'properties', createObject('priority', 110, 'direction', 'Inbound', 'access', if(greater(length(parameters('allowedManagementIPs')), 0), 'Allow', 'Deny'), 'protocol', 'Tcp', 'sourcePortRange', '*', 'destinationPortRange', '3389', 'sourceAddressPrefixes', if(greater(length(parameters('allowedManagementIPs')), 0), parameters('allowedManagementIPs'), createArray('0.0.0.0/32')), 'destinationAddressPrefix', '*', 'description', 'Allow RDP from specified IPs only')), createObject('name', 'AllowBastionCommunication', 'properties', createObject('priority', 120, 'direction', 'Inbound', 'access', 'Allow', 'protocol', '*', 'sourcePortRange', '*', 'destinationPortRanges', createArray('8080', '5701'), 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', 'VirtualNetwork', 'description', 'Allow Bastion communication')), createObject('name', 'DenyAllInbound', 'properties', createObject('priority', 4096, 'direction', 'Inbound', 'access', 'Deny', 'protocol', '*', 'sourcePortRange', '*', 'destinationPortRange', '*', 'sourceAddressPrefix', '*', 'destinationAddressPrefix', '*', 'description', 'Deny all other inbound traffic'))))]"
      }
    },
    {
      "condition": "[equals(parameters('environmentName'), 'prod')]",
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "privatelink.vaultcore.azure.net",
      "location": "global",
      "properties": {}
    },
    {
      "condition": "[equals(parameters('environmentName'), 'prod')]",
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "privatelink.postgres.database.azure.com",
      "location": "global",
      "properties": {}
    },
    {
      "condition": "[equals(parameters('environmentName'), 'prod')]",
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "privatelink.redis.cache.windows.net",
      "location": "global",
      "properties": {}
    },
    {
      "condition": "[equals(parameters('environmentName'), 'prod')]",
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "privatelink.blob.core.windows.net",
      "location": "global",
      "properties": {}
    },
    {
      "condition": "[equals(parameters('environmentName'), 'prod')]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'privatelink.vaultcore.azure.net', format('{0}-link', format('vnet-rbc-{0}', parameters('environmentName'))))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName')))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net')]",
        "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('environmentName'), 'prod')]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'privatelink.postgres.database.azure.com', format('{0}-link', format('vnet-rbc-{0}', parameters('environmentName'))))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName')))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.postgres.database.azure.com')]",
        "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('environmentName'), 'prod')]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'privatelink.redis.cache.windows.net', format('{0}-link', format('vnet-rbc-{0}', parameters('environmentName'))))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName')))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.redis.cache.windows.net')]",
        "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('environmentName'), 'prod')]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'privatelink.blob.core.windows.net', format('{0}-link', format('vnet-rbc-{0}', parameters('environmentName'))))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName')))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.blob.core.windows.net')]",
        "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('environmentName'), 'prod')]",
      "type": "Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies",
      "apiVersion": "2023-09-01",
      "name": "[format('waf-rbc-{0}', parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "customRules": [
          {
            "name": "RateLimitRule",
            "priority": 1,
            "ruleType": "RateLimitRule",
            "matchConditions": [
              {
                "matchVariables": [
                  {
                    "variableName": "RemoteAddr"
                  }
                ],
                "operator": "IPMatch",
                "negationConditon": false,
                "matchValues": [
                  "0.0.0.0/0"
                ]
              }
            ],
            "action": "Block",
            "rateLimitDuration": "OneMin",
            "rateLimitThreshold": 100
          }
        ],
        "policySettings": {
          "requestBodyCheck": true,
          "maxRequestBodySizeInKb": 128,
          "fileUploadLimitInMb": 10,
          "state": "Enabled",
          "mode": "Prevention",
          "requestBodyInspectLimitInKB": 128,
          "fileUploadEnforcement": true,
          "requestBodyEnforcement": true
        },
        "managedRules": {
          "managedRuleSets": [
            {
              "ruleSetType": "OWASP",
              "ruleSetVersion": "3.2",
              "ruleGroupOverrides": []
            },
            {
              "ruleSetType": "Microsoft_BotManagerRuleSet",
              "ruleSetVersion": "1.0"
            }
          ],
          "exclusions": []
        }
      }
    },
    {
      "condition": "[equals(parameters('environmentName'), 'prod')]",
      "type": "Microsoft.Network/ddosProtectionPlans",
      "apiVersion": "2023-09-01",
      "name": "[format('ddos-rbc-{0}', parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/networkWatchers",
      "apiVersion": "2023-09-01",
      "name": "[format('nw-rbc-{0}', parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "properties": {}
    },
    {
      "condition": "[equals(parameters('environmentName'), 'prod')]",
      "type": "Microsoft.Network/networkWatchers/flowLogs",
      "apiVersion": "2023-09-01",
      "name": "[format('{0}/{1}', format('nw-rbc-{0}', parameters('environmentName')), format('fl-app-services-{0}', parameters('environmentName')))]",
      "location": "[parameters('location')]",
      "properties": {
        "targetResourceId": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-app-services-{0}', parameters('environmentName')))]",
        "storageId": "[format('/subscriptions/{0}/resourceGroups/RBCLeasingApp-{1}{2}/providers/Microsoft.Storage/storageAccounts/strbc{3}logs', subscription().subscriptionId, toUpper(take(parameters('environmentName'), 1)), toLower(skip(parameters('environmentName'), 1)), parameters('environmentName'))]",
        "enabled": true,
        "retentionPolicy": {
          "days": 30,
          "enabled": true
        },
        "format": {
          "type": "JSON",
          "version": 2
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkWatchers', format('nw-rbc-{0}', parameters('environmentName')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-app-services-{0}', parameters('environmentName')))]"
      ]
    }
  ],
  "outputs": {
    "vnetId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName')))]"
    },
    "vnetName": {
      "type": "string",
      "value": "[format('vnet-rbc-{0}', parameters('environmentName'))]"
    },
    "appServicesSubnetId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName'))), '2023-09-01').subnets[0].id]"
    },
    "databaseSubnetId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName'))), '2023-09-01').subnets[1].id]"
    },
    "redisSubnetId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName'))), '2023-09-01').subnets[2].id]"
    },
    "privateEndpointsSubnetId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName'))), '2023-09-01').subnets[3].id]"
    },
    "containerAppsSubnetId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName'))), '2023-09-01').subnets[4].id]"
    },
    "managementSubnetId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-rbc-{0}', parameters('environmentName'))), '2023-09-01').subnets[5].id]"
    },
    "nsgAppServicesId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-app-services-{0}', parameters('environmentName')))]"
    },
    "nsgDatabaseId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-database-{0}', parameters('environmentName')))]"
    },
    "nsgRedisId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-redis-{0}', parameters('environmentName')))]"
    },
    "nsgContainerAppsId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-container-apps-{0}', parameters('environmentName')))]"
    },
    "nsgManagementId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-management-{0}', parameters('environmentName')))]"
    },
    "privateDnsZoneKeyVaultId": {
      "type": "string",
      "value": "[if(equals(parameters('environmentName'), 'prod'), resourceId('Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net'), '')]"
    },
    "privateDnsZonePostgreSQLId": {
      "type": "string",
      "value": "[if(equals(parameters('environmentName'), 'prod'), resourceId('Microsoft.Network/privateDnsZones', 'privatelink.postgres.database.azure.com'), '')]"
    },
    "privateDnsZoneRedisId": {
      "type": "string",
      "value": "[if(equals(parameters('environmentName'), 'prod'), resourceId('Microsoft.Network/privateDnsZones', 'privatelink.redis.cache.windows.net'), '')]"
    },
    "privateDnsZoneStorageId": {
      "type": "string",
      "value": "[if(equals(parameters('environmentName'), 'prod'), resourceId('Microsoft.Network/privateDnsZones', 'privatelink.blob.core.windows.net'), '')]"
    },
    "wafPolicyId": {
      "type": "string",
      "value": "[if(equals(parameters('environmentName'), 'prod'), resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', format('waf-rbc-{0}', parameters('environmentName'))), '')]"
    },
    "ddosProtectionPlanId": {
      "type": "string",
      "value": "[if(equals(parameters('environmentName'), 'prod'), resourceId('Microsoft.Network/ddosProtectionPlans', format('ddos-rbc-{0}', parameters('environmentName'))), '')]"
    }
  }
}